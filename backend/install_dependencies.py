#!/usr/bin/env python3
"""
Script d'installation intelligent des d√©pendances pour √©viter les conflits.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description, ignore_errors=False):
    """Ex√©cuter une commande avec gestion d'erreurs."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        if ignore_errors:
            print(f"‚ö†Ô∏è {description} - Ignor√©: {e}")
            return False, e.stderr
        else:
            print(f"‚ùå {description} - Erreur: {e}")
            print(f"Sortie d'erreur: {e.stderr}")
            return False, e.stderr

def install_package(package, description="", alternative=None):
    """Installer un package avec gestion d'alternative."""
    success, output = run_command(f"pip install {package}", f"Installation de {package}")
    
    if not success and alternative:
        print(f"‚ö†Ô∏è Tentative avec l'alternative: {alternative}")
        success, output = run_command(f"pip install {alternative}", f"Installation alternative de {alternative}")
    
    return success

def main():
    """Installation intelligente des d√©pendances."""
    print("üöÄ Installation intelligente des d√©pendances MySQL")
    print("=" * 55)
    
    # Mise √† jour de pip
    run_command("python -m pip install --upgrade pip", "Mise √† jour de pip")
    
    # D√©pendances essentielles en premier
    essential_packages = [
        ("python-dotenv==1.0.0", "Variables d'environnement"),
        ("fastapi==0.104.1", "Framework FastAPI"),
        ("uvicorn[standard]==0.24.0", "Serveur ASGI"),
        ("pydantic==2.5.0", "Validation des donn√©es"),
        ("pydantic-settings==2.1.0", "Configuration Pydantic"),
        ("sqlalchemy==2.0.23", "ORM SQLAlchemy"),
        ("alembic==1.13.1", "Migrations de base de donn√©es"),
    ]
    
    print("\nüì¶ Installation des d√©pendances essentielles...")
    for package, desc in essential_packages:
        install_package(package, desc)
    
    # D√©pendances MySQL avec alternatives
    print("\nüóÑÔ∏è Installation des connecteurs MySQL...")
    mysql_packages = [
        ("pymysql==1.1.0", "Connecteur MySQL Python pur"),
        ("aiomysql==0.2.0", "Connecteur MySQL asynchrone"),
    ]
    
    for package, desc in mysql_packages:
        install_package(package, desc)
    
    # mysqlclient avec alternative
    print("\nüîß Installation de mysqlclient (avec alternative)...")
    mysqlclient_success = install_package(
        "mysqlclient==2.2.0", 
        "Connecteur MySQL C", 
        "mysql-connector-python==8.2.0"
    )
    
    if not mysqlclient_success:
        print("‚ö†Ô∏è mysqlclient √©chou√©, utilisation de mysql-connector-python")
    
    # S√©curit√© et authentification
    print("\nüîê Installation des d√©pendances de s√©curit√©...")
    security_packages = [
        ("cryptography==41.0.8", "Cryptographie"),
        ("python-jose[cryptography]==3.3.0", "JWT avec cryptographie"),
        ("passlib[bcrypt]==1.7.4", "Hachage de mots de passe"),
        ("python-multipart==0.0.6", "Support multipart"),
    ]
    
    for package, desc in security_packages:
        install_package(package, desc)
    
    # Reconnaissance faciale (optionnel)
    print("\nüëÅÔ∏è Installation des d√©pendances de reconnaissance faciale...")
    face_packages = [
        ("numpy==1.24.3", "Calculs num√©riques"),
        ("Pillow==10.1.0", "Traitement d'images"),
        ("opencv-python==4.8.1.78", "Vision par ordinateur"),
    ]
    
    for package, desc in face_packages:
        success = install_package(package, desc)
        if not success and "opencv" in package:
            print("‚ö†Ô∏è OpenCV peut n√©cessiter des d√©pendances syst√®me suppl√©mentaires")
    
    # Face recognition (peut √©chouer sur certains syst√®mes)
    print("\nüîç Installation de face-recognition (optionnel)...")
    face_recognition_success = install_package(
        "face-recognition==1.3.0", 
        "Reconnaissance faciale (optionnel)"
    )
    
    if not face_recognition_success:
        print("‚ö†Ô∏è face-recognition √©chou√© - vous pouvez continuer sans cette fonctionnalit√©")
    
    # Socket.IO et temps r√©el
    print("\n‚ö° Installation des d√©pendances temps r√©el...")
    realtime_packages = [
        ("python-socketio==5.11.0", "Socket.IO serveur"),
        ("python-engineio==4.7.1", "Engine.IO"),
    ]
    
    for package, desc in realtime_packages:
        install_package(package, desc)
    
    # Autres d√©pendances
    print("\nüìö Installation des autres d√©pendances...")
    other_packages = [
        ("requests==2.31.0", "Requ√™tes HTTP"),
        ("email-validator==2.1.0", "Validation email"),
        ("python-dateutil==2.8.2", "Utilitaires de date"),
        ("structlog==23.2.0", "Logging structur√©"),
    ]
    
    for package, desc in other_packages:
        install_package(package, desc)
    
    # D√©pendances optionnelles
    print("\nüîß Installation des d√©pendances optionnelles...")
    optional_packages = [
        ("pytest==7.4.3", "Tests (optionnel)"),
        ("httpx==0.25.2", "Client HTTP async (optionnel)"),
        ("pyfcm==1.5.4", "Notifications push (optionnel)"),
        ("redis==5.0.1", "Cache Redis (optionnel)"),
        ("celery==5.3.4", "T√¢ches asynchrones (optionnel)"),
    ]
    
    for package, desc in optional_packages:
        install_package(package, desc)
    
    # V√©rification finale
    print("\nüß™ V√©rification des installations critiques...")
    critical_imports = [
        ("fastapi", "FastAPI"),
        ("sqlalchemy", "SQLAlchemy"),
        ("pymysql", "PyMySQL"),
        ("cryptography", "Cryptographie"),
        ("dotenv", "Python-dotenv"),
    ]
    
    failed_imports = []
    for module, name in critical_imports:
        try:
            __import__(module)
            print(f"‚úÖ {name} import√© avec succ√®s")
        except ImportError:
            print(f"‚ùå {name} non disponible")
            failed_imports.append(name)
    
    # R√©sum√© final
    print("\n" + "=" * 55)
    if not failed_imports:
        print("üéâ Installation termin√©e avec succ√®s!")
        print("‚úÖ Toutes les d√©pendances critiques sont install√©es")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurer MySQL: python setup_mysql.py")
        print("2. Cr√©er les migrations: python create_initial_migration.py")
        print("3. Appliquer les migrations: alembic upgrade head")
        print("4. D√©marrer l'API: python -m uvicorn app.main:app --reload")
    else:
        print("‚ö†Ô∏è Installation termin√©e avec des avertissements")
        print(f"‚ùå D√©pendances manquantes: {', '.join(failed_imports)}")
        print("\nüîß Solutions possibles:")
        print("- R√©ex√©cuter le script")
        print("- Installer manuellement les d√©pendances manquantes")
        print("- V√©rifier la compatibilit√© Python 3.10")
    
    print("\nüí° En cas de probl√®me:")
    print("- V√©rifiez que Python 3.10 est install√©")
    print("- Mettez √† jour pip: python -m pip install --upgrade pip")
    print("- Utilisez un environnement virtuel")

if __name__ == "__main__":
    main()