#!/usr/bin/env python3
"""
Script pour cr√©er automatiquement la base de donn√©es MySQL avec toutes les tables.
"""

import mysql.connector
from mysql.connector import Error
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire courant au path Python
sys.path.append(str(Path(__file__).parent))

from dotenv import load_dotenv
load_dotenv()

def create_database():
    """Cr√©er la base de donn√©es MySQL."""
    print("üöÄ Cr√©ation de la base de donn√©es MySQL")
    print("=" * 40)
    
    # Configuration par d√©faut
    DB_NAME = "waste_management"
    DB_USER = "waste_user"
    DB_PASSWORD = "waste_password_2024"
    DB_HOST = "localhost"
    DB_PORT = 3306
    
    try:
        # Connexion root pour cr√©er la base
        print("üîê Connexion √† MySQL en tant que root...")
        root_password = input("Entrez le mot de passe root MySQL (ou appuyez sur Entr√©e si aucun): ").strip()
        
        connection = mysql.connector.connect(
            host=DB_HOST,
            port=DB_PORT,
            user="root",
            password=root_password if root_password else None
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            
            # Cr√©er la base de donn√©es
            print(f"üìä Cr√©ation de la base de donn√©es '{DB_NAME}'...")
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            
            # Cr√©er l'utilisateur
            print(f"üë§ Cr√©ation de l'utilisateur '{DB_USER}'...")
            cursor.execute(f"CREATE USER IF NOT EXISTS '{DB_USER}'@'localhost' IDENTIFIED BY '{DB_PASSWORD}'")
            
            # Accorder les privil√®ges
            print("üîë Attribution des privil√®ges...")
            cursor.execute(f"GRANT ALL PRIVILEGES ON {DB_NAME}.* TO '{DB_USER}'@'localhost'")
            cursor.execute("FLUSH PRIVILEGES")
            
            print("‚úÖ Base de donn√©es et utilisateur cr√©√©s avec succ√®s!")
            
            # Fermer la connexion root
            cursor.close()
            connection.close()
            
            return True
            
    except Error as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        return False

def create_tables():
    """Cr√©er toutes les tables avec SQLAlchemy."""
    print("\nüèóÔ∏è Cr√©ation des tables...")
    
    try:
        # Importer les mod√®les et la base
        from app.core.database import Base, engine
        from app.models import user, waste, notification
        
        # Cr√©er toutes les tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Toutes les tables cr√©√©es avec succ√®s!")
        
        # Lister les tables cr√©√©es
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        
        print(f"\nüìã Tables cr√©√©es ({len(tables)}):")
        for table in tables:
            print(f"  - {table}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def test_connection():
    """Tester la connexion √† la base de donn√©es."""
    print("\nüß™ Test de connexion...")
    
    try:
        from app.core.database import test_db_connection
        import asyncio
        
        result = asyncio.run(test_db_connection())
        
        if result:
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie!")
            return True
        else:
            print("‚ùå √âchec de la connexion √† la base de donn√©es")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de connexion: {e}")
        return False

def create_env_file():
    """Cr√©er le fichier .env s'il n'existe pas."""
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚úÖ Fichier .env existant trouv√©")
        return True
    
    print("üìù Cr√©ation du fichier .env...")
    
    env_content = """# Configuration de la base de donn√©es MySQL
DATABASE_URL=mysql+pymysql://waste_user:waste_password_2024@localhost:3306/waste_management
DATABASE_URL_ASYNC=mysql+aiomysql://waste_user:waste_password_2024@localhost:3306/waste_management

# JWT et s√©curit√©
JWT_SECRET_KEY=WasteManagement2024_JWT_LocalKey_SecureToken_32Chars
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=30

# Chiffrement biom√©trique
BIOMETRIC_ENCRYPTION_KEY=BiometricAuth_LocalEncryption_WasteApp_2024_Key

# Redis (optionnel pour le d√©veloppement local)
REDIS_URL=redis://localhost:6379/0

# Socket.IO
SOCKETIO_SECRET_KEY=WasteApp_SocketIO_LocalSecret_2024_SecureKey_Here

# Notifications push (optionnel)
FCM_SERVER_KEY=your-fcm-server-key
FCM_SENDER_ID=your-fcm-sender-id

# CORS
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# Celery (optionnel pour le d√©veloppement local)
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# Configuration de l'application
DEBUG=true
LOG_LEVEL=INFO
"""
    
    with open(env_file, "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√© avec succ√®s!")
    return True

def main():
    """Fonction principale."""
    print("üöÄ Configuration compl√®te de la base de donn√©es MySQL")
    print("=" * 55)
    
    # V√©rifier si MySQL est install√©
    try:
        import mysql.connector
        print("‚úÖ MySQL connector disponible")
    except ImportError:
        print("‚ùå MySQL connector non trouv√©")
        print("Installez-le avec: pip install mysql-connector-python")
        sys.exit(1)
    
    # Cr√©er le fichier .env
    if not create_env_file():
        print("‚ùå √âchec de la cr√©ation du fichier .env")
        sys.exit(1)
    
    # Recharger les variables d'environnement
    load_dotenv()
    
    # Cr√©er la base de donn√©es
    if not create_database():
        print("‚ùå √âchec de la cr√©ation de la base de donn√©es")
        sys.exit(1)
    
    # Cr√©er les tables
    if not create_tables():
        print("‚ùå √âchec de la cr√©ation des tables")
        sys.exit(1)
    
    # Tester la connexion
    if not test_connection():
        print("‚ùå √âchec du test de connexion")
        sys.exit(1)
    
    # R√©sum√© final
    print("\n" + "=" * 55)
    print("üéâ Configuration termin√©e avec succ√®s!")
    print("=" * 55)
    print(f"üìä Base de donn√©es: waste_management")
    print(f"üë§ Utilisateur: waste_user")
    print(f"üîë Mot de passe: waste_password_2024")
    print(f"üåê H√¥te: localhost:3306")
    print(f"üìù Fichier .env: Cr√©√© et configur√©")
    print(f"üèóÔ∏è Tables: Cr√©√©es et pr√™tes")
    
    print("\nüìã Prochaines √©tapes:")
    print("1. D√©marrer l'API: python -m uvicorn app.main:app --reload")
    print("2. Acc√©der √† l'API: http://localhost:8000")
    print("3. Documentation: http://localhost:8000/api/v1/docs")
    print("4. Tester le frontend: cd .. && npm run dev")
    
    print("\nüîß Commandes utiles:")
    print("- Connexion MySQL: mysql -u waste_user -p waste_management")
    print("- Lister les tables: SHOW TABLES;")
    print("- Voir la structure: DESCRIBE users;")
    
    print("\n‚úÖ Votre backend MySQL est pr√™t √† fonctionner!")

if __name__ == "__main__":
    main()