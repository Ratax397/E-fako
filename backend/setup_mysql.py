#!/usr/bin/env python3
"""
Script de configuration de la base de donn√©es MySQL pour l'application de gestion des d√©chets.
"""

import mysql.connector
from mysql.connector import Error
import os
import sys
from pathlib import Path

# Configuration par d√©faut
DEFAULT_DB_NAME = "waste_management"
DEFAULT_DB_USER = "waste_user"
DEFAULT_DB_PASSWORD = "waste_password_2024"
DEFAULT_DB_HOST = "localhost"
DEFAULT_DB_PORT = 3306


def create_database_and_user():
    """Cr√©er la base de donn√©es et l'utilisateur MySQL."""
    
    # Connexion root (doit exister)
    try:
        connection = mysql.connector.connect(
            host=DEFAULT_DB_HOST,
            port=DEFAULT_DB_PORT,
            user="root",
            password=input("Entrez le mot de passe root MySQL (laissez vide si aucun): ").strip() or None
        )
        
        if connection.is_connected():
            cursor = connection.cursor()
            
            # Cr√©er la base de donn√©es
            print(f"Cr√©ation de la base de donn√©es '{DEFAULT_DB_NAME}'...")
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DEFAULT_DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            
            # Cr√©er l'utilisateur
            print(f"Cr√©ation de l'utilisateur '{DEFAULT_DB_USER}'...")
            cursor.execute(f"CREATE USER IF NOT EXISTS '{DEFAULT_DB_USER}'@'localhost' IDENTIFIED BY '{DEFAULT_DB_PASSWORD}'")
            
            # Accorder les privil√®ges
            print("Attribution des privil√®ges...")
            cursor.execute(f"GRANT ALL PRIVILEGES ON {DEFAULT_DB_NAME}.* TO '{DEFAULT_DB_USER}'@'localhost'")
            cursor.execute("FLUSH PRIVILEGES")
            
            print("‚úÖ Base de donn√©es et utilisateur cr√©√©s avec succ√®s!")
            
            # Tester la connexion avec le nouvel utilisateur
            test_connection()
            
    except Error as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        sys.exit(1)
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


def test_connection():
    """Tester la connexion avec le nouvel utilisateur."""
    try:
        connection = mysql.connector.connect(
            host=DEFAULT_DB_HOST,
            port=DEFAULT_DB_PORT,
            user=DEFAULT_DB_USER,
            password=DEFAULT_DB_PASSWORD,
            database=DEFAULT_DB_NAME
        )
        
        if connection.is_connected():
            print("‚úÖ Connexion test√©e avec succ√®s!")
            connection.close()
        else:
            print("‚ùå √âchec de la connexion de test")
            
    except Error as e:
        print(f"‚ùå Erreur lors du test de connexion: {e}")


def create_env_file():
    """Cr√©er le fichier .env avec les variables d'environnement."""
    env_content = f"""# Configuration de la base de donn√©es MySQL
DATABASE_URL=mysql+pymysql://{DEFAULT_DB_USER}:{DEFAULT_DB_PASSWORD}@{DEFAULT_DB_HOST}:{DEFAULT_DB_PORT}/{DEFAULT_DB_NAME}
DATABASE_URL_ASYNC=mysql+aiomysql://{DEFAULT_DB_USER}:{DEFAULT_DB_PASSWORD}@{DEFAULT_DB_HOST}:{DEFAULT_DB_PORT}/{DEFAULT_DB_NAME}

# JWT et s√©curit√©
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=30

# Chiffrement biom√©trique
BIOMETRIC_ENCRYPTION_KEY=your-biometric-encryption-key-change-this

# Redis (optionnel pour le d√©veloppement local)
REDIS_URL=redis://localhost:6379/0

# Socket.IO
SOCKETIO_SECRET_KEY=your-socketio-secret-key

# Notifications push (optionnel)
FCM_SERVER_KEY=your-fcm-server-key
FCM_SENDER_ID=your-fcm-sender-id

# CORS
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# Celery (optionnel pour le d√©veloppement local)
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# Configuration de l'application
DEBUG=true
LOG_LEVEL=INFO
"""
    
    env_file = Path(__file__).parent / ".env"
    with open(env_file, "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print(f"‚úÖ Fichier .env cr√©√©: {env_file}")


def main():
    """Fonction principale."""
    print("üöÄ Configuration de la base de donn√©es MySQL pour Waste Management")
    print("=" * 60)
    
    # V√©rifier si MySQL est install√©
    try:
        import mysql.connector
        print("‚úÖ Module mysql-connector-python disponible")
    except ImportError:
        print("‚ùå Module mysql-connector-python non trouv√©")
        print("Installez-le avec: pip install mysql-connector-python")
        sys.exit(1)
    
    # Cr√©er la base de donn√©es et l'utilisateur
    create_database_and_user()
    
    # Cr√©er le fichier .env
    create_env_file()
    
    print("\n" + "=" * 60)
    print("‚úÖ Configuration termin√©e!")
    print(f"üìä Base de donn√©es: {DEFAULT_DB_NAME}")
    print(f"üë§ Utilisateur: {DEFAULT_DB_USER}")
    print(f"üîë Mot de passe: {DEFAULT_DB_PASSWORD}")
    print(f"üåê H√¥te: {DEFAULT_DB_HOST}:{DEFAULT_DB_PORT}")
    print("\nüìù Prochaines √©tapes:")
    print("1. Installez les d√©pendances: pip install -r requirements.txt")
    print("2. Lancez l'application: python -m uvicorn app.main:app --reload")
    print("3. Acc√©dez √† l'API: http://localhost:8000")


if __name__ == "__main__":
    main()