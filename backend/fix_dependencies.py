#!/usr/bin/env python3
"""
Script de d√©pannage pour r√©soudre les probl√®mes de d√©pendances.
"""

import subprocess
import sys
import platform

def run_command(command, description):
    """Ex√©cuter une commande avec gestion d'erreurs."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e}")
        return False, e.stderr

def fix_cryptography():
    """R√©soudre les probl√®mes de cryptography."""
    print("\nüîß R√©solution des probl√®mes de cryptography...")
    
    # D√©sinstaller et r√©installer cryptography
    run_command("pip uninstall cryptography -y", "D√©sinstallation de cryptography")
    
    # Installer les d√©pendances syst√®me selon l'OS
    system = platform.system().lower()
    
    if system == "linux":
        print("üì¶ Installation des d√©pendances syst√®me Linux...")
        run_command("sudo apt-get update", "Mise √† jour des paquets")
        run_command("sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev", "Installation des d√©pendances de compilation")
    elif system == "darwin":  # macOS
        print("üì¶ Installation des d√©pendances syst√®me macOS...")
        run_command("brew install openssl libffi", "Installation via Homebrew")
    elif system == "windows":
        print("üì¶ Windows d√©tect√© - utilisation de la version pr√©compil√©e...")
    
    # R√©installer cryptography
    success, _ = run_command("pip install cryptography==41.0.8", "R√©installation de cryptography")
    
    if not success:
        print("‚ö†Ô∏è Tentative avec une version plus r√©cente...")
        run_command("pip install cryptography", "Installation de la derni√®re version de cryptography")

def fix_mysqlclient():
    """R√©soudre les probl√®mes de mysqlclient."""
    print("\nüîß R√©solution des probl√®mes de mysqlclient...")
    
    system = platform.system().lower()
    
    if system == "linux":
        print("üì¶ Installation des d√©pendances MySQL Linux...")
        run_command("sudo apt-get install -y default-libmysqlclient-dev build-essential", "D√©pendances MySQL Linux")
    elif system == "darwin":  # macOS
        print("üì¶ Installation des d√©pendances MySQL macOS...")
        run_command("brew install mysql-client", "Installation MySQL client via Homebrew")
    elif system == "windows":
        print("üì¶ Windows d√©tect√© - utilisation de l'alternative...")
        run_command("pip install mysql-connector-python==8.2.0", "Installation de mysql-connector-python")
        return
    
    # Tentative d'installation de mysqlclient
    success, _ = run_command("pip install mysqlclient==2.2.0", "Installation de mysqlclient")
    
    if not success:
        print("‚ö†Ô∏è mysqlclient √©chou√©, utilisation de l'alternative...")
        run_command("pip install mysql-connector-python==8.2.0", "Installation de mysql-connector-python")

def fix_face_recognition():
    """R√©soudre les probl√®mes de face-recognition."""
    print("\nüîß R√©solution des probl√®mes de face-recognition...")
    
    system = platform.system().lower()
    
    if system == "linux":
        print("üì¶ Installation des d√©pendances face-recognition Linux...")
        run_command("sudo apt-get install -y cmake", "Installation de cmake")
        run_command("sudo apt-get install -y libopenblas-dev liblapack-dev", "D√©pendances BLAS/LAPACK")
    elif system == "darwin":  # macOS
        print("üì¶ Installation des d√©pendances face-recognition macOS...")
        run_command("brew install cmake", "Installation de cmake via Homebrew")
    elif system == "windows":
        print("üì¶ Windows d√©tect√© - installation des d√©pendances...")
        run_command("pip install cmake", "Installation de cmake via pip")
    
    # Installation de dlib d'abord
    print("üîß Installation de dlib...")
    success, _ = run_command("pip install dlib==19.24.2", "Installation de dlib")
    
    if success:
        run_command("pip install face-recognition==1.3.0", "Installation de face-recognition")
    else:
        print("‚ö†Ô∏è dlib √©chou√© - face-recognition sera ignor√©")

def fix_opencv():
    """R√©soudre les probl√®mes d'OpenCV."""
    print("\nüîß R√©solution des probl√®mes d'OpenCV...")
    
    # D√©sinstaller les versions conflictuelles
    run_command("pip uninstall opencv-python opencv-contrib-python -y", "Nettoyage des versions OpenCV")
    
    # R√©installer la version stable
    run_command("pip install opencv-python==4.8.1.78", "Installation d'OpenCV")

def remove_python_cors():
    """Supprimer python-cors qui n'existe pas."""
    print("\nüîß Suppression de python-cors (package inexistant)...")
    run_command("pip uninstall python-cors -y", "Suppression de python-cors")

def main():
    """Fonction principale de d√©pannage."""
    print("üõ†Ô∏è Script de d√©pannage des d√©pendances")
    print("=" * 45)
    
    print(f"üñ•Ô∏è Syst√®me d√©tect√©: {platform.system()} {platform.release()}")
    print(f"üêç Python version: {sys.version}")
    
    # Mise √† jour de pip
    run_command("python -m pip install --upgrade pip", "Mise √† jour de pip")
    
    # R√©solution des probl√®mes courants
    remove_python_cors()
    fix_cryptography()
    fix_mysqlclient()
    fix_opencv()
    fix_face_recognition()
    
    # Installation des d√©pendances essentielles
    print("\nüì¶ Installation des d√©pendances essentielles...")
    essential_packages = [
        "python-dotenv==1.0.0",
        "fastapi==0.104.1",
        "uvicorn[standard]==0.24.0",
        "pydantic==2.5.0",
        "pydantic-settings==2.1.0",
        "sqlalchemy==2.0.23",
        "pymysql==1.1.0",
        "aiomysql==0.2.0",
        "alembic==1.13.1",
        "python-jose[cryptography]==3.3.0",
        "passlib[bcrypt]==1.7.4",
        "python-multipart==0.0.6",
        "python-socketio==5.11.0",
        "python-engineio==4.7.1",
        "requests==2.31.0",
        "email-validator==2.1.0",
        "python-dateutil==2.8.2",
        "structlog==23.2.0",
        "numpy==1.24.3",
        "Pillow==10.1.0",
    ]
    
    for package in essential_packages:
        run_command(f"pip install {package}", f"Installation de {package}")
    
    # V√©rification finale
    print("\nüß™ V√©rification des installations...")
    test_imports = [
        "fastapi",
        "sqlalchemy",
        "pymysql",
        "cryptography",
        "dotenv",
        "pydantic",
        "uvicorn",
        "alembic",
        "numpy",
        "PIL",
    ]
    
    failed = []
    for module in test_imports:
        try:
            __import__(module)
            print(f"‚úÖ {module} OK")
        except ImportError:
            print(f"‚ùå {module} manquant")
            failed.append(module)
    
    # R√©sum√©
    print("\n" + "=" * 45)
    if not failed:
        print("üéâ Toutes les d√©pendances essentielles sont install√©es!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurer MySQL: python setup_mysql.py")
        print("2. Cr√©er les migrations: python create_initial_migration.py")
        print("3. D√©marrer l'API: python -m uvicorn app.main:app --reload")
    else:
        print(f"‚ö†Ô∏è D√©pendances manquantes: {', '.join(failed)}")
        print("\nüîß Solutions possibles:")
        print("- R√©ex√©cuter ce script")
        print("- Installer manuellement les d√©pendances manquantes")
        print("- Utiliser un environnement virtuel")
        print("- V√©rifier la compatibilit√© de votre syst√®me")

if __name__ == "__main__":
    main()