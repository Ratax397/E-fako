#!/usr/bin/env python3
"""
Script de test pour valider la migration MySQL.
"""

import asyncio
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire courant au path Python
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """Tester les imports des modules MySQL."""
    print("üîç Test des imports...")
    
    try:
        import mysql.connector
        print("‚úÖ mysql.connector import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import mysql.connector: {e}")
        return False
    
    try:
        import pymysql
        print("‚úÖ pymysql import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import pymysql: {e}")
        return False
    
    try:
        import aiomysql
        print("‚úÖ aiomysql import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur import aiomysql: {e}")
        return False
    
    return True


def test_database_connection():
    """Tester la connexion √† la base de donn√©es."""
    print("\nüîç Test de la connexion √† la base de donn√©es...")
    
    try:
        from app.core.database import test_db_connection
        result = asyncio.run(test_db_connection())
        
        if result:
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            return True
        else:
            print("‚ùå √âchec de la connexion √† la base de donn√©es")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test de connexion: {e}")
        return False


def test_models_import():
    """Tester l'import des mod√®les."""
    print("\nüîç Test des mod√®les...")
    
    try:
        from app.models.user import User, UserRole, UserStatus
        print("‚úÖ Mod√®le User import√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur import mod√®le User: {e}")
        return False
    
    try:
        from app.models.waste import WasteRecord, WasteType, WasteStatus
        print("‚úÖ Mod√®le WasteRecord import√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur import mod√®le WasteRecord: {e}")
        return False
    
    try:
        from app.models.notification import Notification, NotificationType
        print("‚úÖ Mod√®le Notification import√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur import mod√®le Notification: {e}")
        return False
    
    return True


def test_configuration():
    """Tester la configuration de l'application."""
    print("\nüîç Test de la configuration...")
    
    try:
        from app.core.config import settings
        print("‚úÖ Configuration charg√©e avec succ√®s")
        
        # V√©rifier les variables essentielles
        required_vars = [
            'DATABASE_URL',
            'DATABASE_URL_ASYNC',
            'JWT_SECRET_KEY',
            'BIOMETRIC_ENCRYPTION_KEY'
        ]
        
        for var in required_vars:
            if hasattr(settings, var):
                value = getattr(settings, var)
                if value and value != "":
                    print(f"‚úÖ {var} configur√©")
                else:
                    print(f"‚ö†Ô∏è {var} vide ou non configur√©")
            else:
                print(f"‚ùå {var} manquant")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de la configuration: {e}")
        return False


def test_database_operations():
    """Tester les op√©rations de base de donn√©es."""
    print("\nüîç Test des op√©rations de base de donn√©es...")
    
    try:
        from app.core.database import SessionLocal
        from app.models.user import User, UserRole, UserStatus
        
        # Test de cr√©ation de session
        db = SessionLocal()
        print("‚úÖ Session de base de donn√©es cr√©√©e")
        
        # Test de requ√™te simple
        try:
            users = db.query(User).limit(1).all()
            print("‚úÖ Requ√™te de base de donn√©es r√©ussie")
        except Exception as e:
            print(f"‚ö†Ô∏è Requ√™te de base de donn√©es √©chou√©e (normal si pas de donn√©es): {e}")
        
        db.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors des op√©rations de base de donn√©es: {e}")
        return False


def test_async_database():
    """Tester les op√©rations asynchrones de base de donn√©es."""
    print("\nüîç Test des op√©rations asynchrones...")
    
    async def test_async():
        try:
            from app.core.database import AsyncSessionLocal
            from app.models.user import User
            
            async with AsyncSessionLocal() as session:
                # Test de requ√™te asynchrone simple
                result = await session.execute("SELECT 1")
                print("‚úÖ Requ√™te asynchrone r√©ussie")
                return True
        except Exception as e:
            print(f"‚ùå Erreur lors des op√©rations asynchrones: {e}")
            return False
    
    return asyncio.run(test_async())


def test_schema_creation():
    """Tester la cr√©ation du sch√©ma de base de donn√©es."""
    print("\nüîç Test de la cr√©ation du sch√©ma...")
    
    try:
        from app.core.database import Base, engine
        from app.models import user, waste, notification
        
        # Cr√©er toutes les tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Sch√©ma de base de donn√©es cr√©√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du sch√©ma: {e}")
        return False


def main():
    """Fonction principale de test."""
    print("üß™ Test de validation de la migration MySQL")
    print("=" * 50)
    
    tests = [
        ("Imports MySQL", test_imports),
        ("Connexion base de donn√©es", test_database_connection),
        ("Mod√®les", test_models_import),
        ("Configuration", test_configuration),
        ("Op√©rations de base de donn√©es", test_database_operations),
        ("Op√©rations asynchrones", test_async_database),
        ("Cr√©ation du sch√©ma", test_schema_creation),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå Test '{test_name}' √©chou√©")
        except Exception as e:
            print(f"‚ùå Test '{test_name}' a lev√© une exception: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! La migration MySQL est r√©ussie.")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)